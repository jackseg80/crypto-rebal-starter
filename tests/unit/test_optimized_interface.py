#!/usr/bin/env python3
"""
Test de l'interface optimis√©e avec section pliable et boutons supprim√©s
"""

import requests

def test_optimized_interface():
    """Test l'interface optimis√©e"""
    print("Test de l'interface optimis√©e")
    print("=" * 50)
    
    BASE_URL = "http://localhost:8080"
    
    # Test 1: V√©rifier rebalance.html optimis√©
    print("\n1. Test rebalance.html optimis√©...")
    try:
        resp = requests.get(f"{BASE_URL}/static/rebalance.html", timeout=10)
        if resp.status_code == 200:
            content = resp.text
            
            # V√©rifications des am√©liorations
            has_collapsible_section = "onclick=\"toggleStrategiesSection()\"" in content
            has_toggle_function = "function toggleStrategiesSection()" in content
            no_generate_plan_button = "G√©n√©rer le plan" not in content
            has_sync_ccs_button = "üéØ Sync CCS" in content
            has_placeholder_handling = "_isPlaceholder" in content
            has_error_handling = "_isError" in content
            has_localStorage_persistence = "localStorage.setItem('strategies_section_collapsed'" in content
            
            print(f"   Section pliable: {'OUI' if has_collapsible_section else 'NON'}")
            print(f"   Fonction toggle: {'OUI' if has_toggle_function else 'NON'}")
            print(f"   Bouton 'G√©n√©rer le plan' supprim√©: {'OUI' if no_generate_plan_button else 'NON'}")
            print(f"   Bouton 'Sync CCS': {'OUI' if has_sync_ccs_button else 'NON'}")
            print(f"   Gestion placeholder: {'OUI' if has_placeholder_handling else 'NON'}")
            print(f"   Gestion d'erreur: {'OUI' if has_error_handling else 'NON'}")
            print(f"   Persistence √©tat: {'OUI' if has_localStorage_persistence else 'NON'}")
            
            if all([has_collapsible_section, has_toggle_function, no_generate_plan_button, 
                   has_sync_ccs_button, has_placeholder_handling, has_error_handling, 
                   has_localStorage_persistence]):
                print("   ‚úÖ rebalance.html correctement optimis√©")
            else:
                print("   ‚ö†Ô∏è Certaines optimisations manquent")
                
        else:
            print(f"   ‚ùå Impossible d'acc√©der √† rebalance.html (HTTP {resp.status_code})")
            
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
    
    # Test 2: V√©rifier risk-dashboard.html nettoy√©
    print("\n2. Test risk-dashboard.html nettoy√©...")
    try:
        resp = requests.get(f"{BASE_URL}/static/risk-dashboard.html", timeout=10)
        if resp.status_code == 200:
            content = resp.text
            
            has_info_message = "Nouvelle m√©thode d'application" in content
            no_apply_targets_button = "Apply Targets" not in content or content.count("Apply Targets") == 0
            no_apply_targets_function = "window.applyTargetsAction" not in content
            has_sync_instruction = "üéØ Sync CCS" in content
            
            print(f"   Message informatif: {'OUI' if has_info_message else 'NON'}")
            print(f"   Bouton 'Apply Targets' supprim√©: {'OUI' if no_apply_targets_button else 'NON'}")
            print(f"   Fonction applyTargetsAction supprim√©e: {'OUI' if no_apply_targets_function else 'NON'}")
            print(f"   Instructions Sync CCS: {'OUI' if has_sync_instruction else 'NON'}")
            
            if all([has_info_message, no_apply_targets_button, no_apply_targets_function, has_sync_instruction]):
                print("   ‚úÖ risk-dashboard.html correctement nettoy√©")
            else:
                print("   ‚ö†Ô∏è Nettoyage incomplet")
                
        else:
            print(f"   ‚ùå Impossible d'acc√©der √† risk-dashboard.html (HTTP {resp.status_code})")
            
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
    
    print("\n" + "=" * 50)
    print("NOUVELLES FONCTIONNALIT√âS √Ä TESTER MANUELLEMENT")
    print("=" * 50)
    print("""
üß™ WORKFLOW OPTIMIS√â √Ä TESTER:

1. INTERFACE PLIABLE:
   - Aller sur rebalance.html
   - Cliquer sur le titre "üéØ Strat√©gies Pr√©d√©finies" 
   - V√©rifier que la section se plie/d√©plie
   - Rafra√Æchir la page et v√©rifier que l'√©tat est sauvegard√©

2. STRAT√âGIE DYNAMIQUE:
   - Si aucune donn√©e CCS: voir strat√©gie placeholder "En attente de synchronisation"
   - Cliquer "üéØ Sync CCS" sans donn√©es: voir "Aucune donn√©e CCS r√©cente trouv√©e"
   - Avoir des donn√©es CCS puis Sync: voir strat√©gie "Strategic (Dynamic)" fonctionnelle

3. WORKFLOW SIMPLIFI√â:
   - Plus de bouton "G√©n√©rer le plan" (redondant)
   - S√©lectionner une strat√©gie ‚Üí Appliquer ‚Üí Plan g√©n√©r√© automatiquement
   - Plus de confusion avec l'ancien "Apply Targets" dans risk-dashboard

4. GESTION D'ERREURS:
   - Si erreur sync CCS: strat√©gie affich√©e avec ic√¥ne ‚ö†Ô∏è et non-cliquable
   - Autres strat√©gies continuent de fonctionner normalement

AVANTAGES DE L'OPTIMISATION:
‚úÖ Interface plus √©pur√©e
‚úÖ Section pliable pour gagner de la place  
‚úÖ Workflow simplifi√© et intuitif
‚úÖ Gestion robuste des erreurs
‚úÖ Plus de doublons fonctionnels
‚úÖ √âtat de l'interface persist√©
""")

if __name__ == "__main__":
    test_optimized_interface()
