#!/usr/bin/env python3
"""
Test E2E du syst√®me d'ex√©cution

Ce script teste le workflow complet:
1. G√©n√©ration d'un plan de rebalancement
2. Validation du plan d'ex√©cution  
3. Ex√©cution en mode dry-run
4. Monitoring du progr√®s
"""

import requests
import json
import time
import asyncio

API_BASE = "http://localhost:8001"

def test_execution_workflow():
    """Test du workflow complet d'ex√©cution"""
    
    print("[TEST] E2E du systeme d'execution")
    print("=" * 50)
    
    # 1. G√©n√©rer un plan de rebalancement
    print("\n1Ô∏è‚É£ G√©n√©ration du plan de rebalancement...")
    
    rebalance_payload = {
        "primary_symbols": {
            "BTC": ["BTC", "TBTC", "WBTC"],
            "ETH": ["ETH", "WSTETH", "STETH", "RETH", "WETH"],
            "SOL": ["SOL", "JUPSOL", "JITOSOL"]
        },
        "sub_allocation": "proportional",
        "min_trade_usd": 25,
        "dynamic_targets_pct": {
            "BTC": 40,
            "ETH": 25, 
            "Stablecoins": 15,
            "SOL": 10,
            "L1/L0 majors": 10
        }
    }
    
    response = requests.post(
        f"{API_BASE}/rebalance/plan?source=coingecko&min_usd=1&pricing=auto&dynamic_targets=true",
        json=rebalance_payload
    )
    
    if response.status_code != 200:
        print(f"‚ùå Erreur g√©n√©ration plan: {response.status_code}")
        print(response.text)
        return False
    
    rebalance_plan = response.json()
    actions = rebalance_plan.get("actions", [])
    
    print(f"‚úÖ Plan g√©n√©r√©: {len(actions)} actions, ${rebalance_plan.get('total_usd', 0):,.2f} total")
    
    # 2. Valider le plan d'ex√©cution
    print("\n2Ô∏è‚É£ Validation du plan d'ex√©cution...")
    
    validation_payload = {
        "rebalance_actions": actions,
        "metadata": {
            "dynamic_targets_used": True,
            "ccs_score": 45,
            "source_plan": rebalance_plan
        },
        "dry_run": True,
        "max_parallel": 3
    }
    
    response = requests.post(
        f"{API_BASE}/execution/validate-plan",
        json=validation_payload
    )
    
    if response.status_code != 200:
        print(f"‚ùå Erreur validation: {response.status_code}")
        print(response.text)
        return False
    
    validation = response.json()
    plan_id = validation["plan_id"]
    
    print(f"‚úÖ Plan valid√©: {validation['total_orders']} ordres, "
          f"${validation['total_volume']:,.2f} volume")
    
    if validation["errors"]:
        print(f"‚ö†Ô∏è Erreurs: {validation['errors']}")
        return False
    
    if validation["warnings"]:
        print(f"‚ö†Ô∏è Avertissements: {validation['warnings']}")
    
    # 3. Connecter les exchanges
    print("\n3Ô∏è‚É£ Connexion aux exchanges...")
    
    response = requests.post(f"{API_BASE}/execution/exchanges/connect")
    if response.status_code == 200:
        connect_result = response.json()
        print(f"‚úÖ Exchanges connect√©s: {connect_result['message']}")
    else:
        print(f"‚ö†Ô∏è Probl√®me connexion exchanges: {response.status_code}")
    
    # 4. Lancer l'ex√©cution
    print("\n4Ô∏è‚É£ Lancement de l'ex√©cution (dry-run)...")
    
    response = requests.post(
        f"{API_BASE}/execution/execute-plan?plan_id={plan_id}&dry_run=true&max_parallel=2"
    )
    
    if response.status_code != 200:
        print(f"‚ùå Erreur lancement ex√©cution: {response.status_code}")
        print(response.text)
        return False
    
    execution = response.json()
    print(f"‚úÖ Ex√©cution lanc√©e: {execution['message']}")
    print(f"‚è±Ô∏è Dur√©e estim√©e: {execution.get('estimated_duration_seconds', 0):.1f}s")
    
    # 5. Monitoring du progr√®s
    print("\n5Ô∏è‚É£ Monitoring du progr√®s...")
    
    max_wait = 60  # 60 secondes max
    start_time = time.time()
    
    while time.time() - start_time < max_wait:
        response = requests.get(f"{API_BASE}/execution/status/{plan_id}")
        
        if response.status_code == 200:
            status = response.json()
            
            print(f"üìä Progr√®s: {status['completion_percentage']:.1f}% - "
                  f"{status['completed_orders']}/{status['total_orders']} ordres - "
                  f"Succ√®s: {status['success_rate']:.1f}%")
            
            if not status['is_active']:
                print(f"üèÅ Ex√©cution termin√©e: {status['status']}")
                break
        else:
            print(f"‚ö†Ô∏è Erreur statut: {response.status_code}")
        
        time.sleep(2)
    
    # 6. R√©sultats finaux
    print("\n6Ô∏è‚É£ R√©sultats finaux...")
    
    response = requests.get(f"{API_BASE}/execution/orders/{plan_id}")
    if response.status_code == 200:
        orders_detail = response.json()
        orders = orders_detail["orders"]
        
        completed = sum(1 for o in orders if o["status"] == "filled")
        failed = sum(1 for o in orders if o["status"] == "failed")
        total_fees = sum(o["fees"] for o in orders)
        
        print(f"üìà R√©sultats d√©taill√©s:")
        print(f"   ‚úÖ Compl√©t√©s: {completed}/{len(orders)}")
        print(f"   ‚ùå √âchecs: {failed}/{len(orders)}")
        print(f"   üí∞ Frais totaux: ${total_fees:.4f}")
        
        # Afficher quelques ordres exemple
        print(f"\nüìã Exemples d'ordres:")
        for i, order in enumerate(orders[:3]):
            status_emoji = "‚úÖ" if order["status"] == "filled" else "‚ùå" if order["status"] == "failed" else "‚è≥"
            avg_price = order.get('avg_fill_price') or 0
            print(f"   {status_emoji} {order['alias']}: {order['action']} ${abs(order['usd_amount']):.2f} "
                  f"@ ${avg_price:.2f}")
    
    # 7. Statut global du pipeline
    print("\n7Ô∏è‚É£ Statut du pipeline...")
    
    response = requests.get(f"{API_BASE}/execution/pipeline-status")
    if response.status_code == 200:
        pipeline = response.json()
        print(f"üîß Pipeline: {pipeline['pipeline_status']}")
        print(f"üìä Statistiques: {pipeline['statistics']['total_plans']} plans, "
              f"{pipeline['statistics']['success_rate']:.1f}% succ√®s")
    
    print("\nüéâ Test E2E termin√© avec succ√®s!")
    return True

if __name__ == "__main__":
    try:
        success = test_execution_workflow()
        if success:
            print("\n‚úÖ Tous les tests sont pass√©s!")
        else:
            print("\n‚ùå Certains tests ont √©chou√©!")
    except Exception as e:
        print(f"\nüí• Erreur durant les tests: {e}")
        import traceback
        traceback.print_exc()