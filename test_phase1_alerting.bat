@echo off
REM Script de test complet Phase 1 - Syst√®me d'Alertes
REM Usage: test_phase1_alerting.bat

echo üöÄ Tests Phase 1 - Syst√®me d'Alertes Pr√©dictives
echo ================================================

REM V√©rifier que Python est disponible
python --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå Python non trouv√© - installation requise
    exit /b 1
)

REM V√©rifier structure des fichiers
echo.
echo üìÅ V√©rification structure des fichiers...
if not exist "config\alerts_rules.json" (
    echo ‚ùå Fichier config\alerts_rules.json manquant
    exit /b 1
)
if not exist "services\alerts\alert_engine.py" (
    echo ‚ùå AlertEngine manquant
    exit /b 1
)
if not exist "api\alerts_endpoints.py" (
    echo ‚ùå Endpoints alertes manquants
    exit /b 1
)
echo ‚úÖ Structure des fichiers OK

REM Tests unitaires
echo.
echo üß™ Ex√©cution tests unitaires...
python -m pytest tests/unit/test_alert_engine.py -v
if errorlevel 1 (
    echo ‚ö†Ô∏è  Certains tests unitaires ont √©chou√©
    set UNIT_TESTS_FAILED=1
) else (
    echo ‚úÖ Tests unitaires pass√©s
)

REM Tests d'int√©gration API
echo.
echo üîå Tests d'int√©gration API...
python -m pytest tests/integration/test_alerts_api.py -v
if errorlevel 1 (
    echo ‚ö†Ô∏è  Certains tests d'int√©gration ont √©chou√©
    set INTEGRATION_TESTS_FAILED=1
) else (
    echo ‚úÖ Tests d'int√©gration pass√©s
)

REM V√©rifier si le serveur est d√©marr√©
echo.
echo üåê V√©rification serveur local...
python -c "import requests; requests.get('http://localhost:8000/docs', timeout=3)" >nul 2>&1
if errorlevel 1 (
    echo ‚ö†Ô∏è  Serveur local non accessible sur http://localhost:8000
    echo    D√©marrez le serveur avec: uvicorn api.main:app --reload --port 8000
    echo    Les tests manuels seront ignor√©s
    set SERVER_DOWN=1
    goto :skip_manual_tests
)

echo ‚úÖ Serveur local accessible

REM Tests manuels workflow
echo.
echo üéØ Tests workflows manuels...
python tests/manual/test_alerting_workflows.py
if errorlevel 1 (
    set MANUAL_TESTS_FAILED=1
    echo ‚ö†Ô∏è  Certains tests manuels ont √©chou√©
) else (
    echo ‚úÖ Tests workflows manuels pass√©s
)

REM Test hot-reload (optionnel - peut √©chouer si RBAC actif)
echo.
echo üî• Test hot-reload configuration...
python tests/manual/test_config_hot_reload.py
if errorlevel 1 (
    echo ‚ö†Ô∏è  Test hot-reload √©chou√© (peut √™tre normal si RBAC actif)
    set HOTRELOAD_FAILED=1
) else (
    echo ‚úÖ Test hot-reload r√©ussi
)

:skip_manual_tests

REM R√©sum√© final
echo.
echo üìä R√âSUM√â DES TESTS PHASE 1
echo ===========================

if not defined UNIT_TESTS_FAILED (
    echo ‚úÖ Tests Unitaires: PASS√âS
) else (
    echo ‚ùå Tests Unitaires: √âCHOU√âS
)

if not defined INTEGRATION_TESTS_FAILED (
    echo ‚úÖ Tests Int√©gration: PASS√âS
) else (
    echo ‚ùå Tests Int√©gration: √âCHOU√âS
)

if defined SERVER_DOWN (
    echo ‚ö†Ô∏è  Tests Manuels: NON EX√âCUT√âS (serveur non d√©marr√©)
) else (
    if not defined MANUAL_TESTS_FAILED (
        echo ‚úÖ Tests Manuels: PASS√âS
    ) else (
        echo ‚ùå Tests Manuels: √âCHOU√âS
    )
    
    if not defined HOTRELOAD_FAILED (
        echo ‚úÖ Hot-reload: PASS√â
    ) else (
        echo ‚ö†Ô∏è  Hot-reload: √âCHOU√â (peut √™tre normal)
    )
)

echo.
if not defined UNIT_TESTS_FAILED (
    if not defined INTEGRATION_TESTS_FAILED (
        if not defined MANUAL_TESTS_FAILED (
            echo üéâ TOUS LES TESTS CRITIQUES SONT PASS√âS !
            echo    Le syst√®me d'alertes Phase 1 est pr√™t pour la production.
            exit /b 0
        )
    )
)

echo ‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â
echo    Consultez les d√©tails ci-dessus pour diagnostiquer.
echo.
echo üí° Notes:
echo    - √âchecs RBAC (401/403) sont normaux si auth pas configur√©e
echo    - Hot-reload peut √©chouer selon la config syst√®me
echo    - Tests manuels n√©cessitent serveur d√©marr√©
exit /b 1